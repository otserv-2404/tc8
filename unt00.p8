pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--main

--transparency black‚ùé pinküÖæÔ∏è
palt(0,false)
palt(14,true)

cw=20 --card width
ch=28 --card heigth

function _init()
 turncount=0
 
 ene=0
 
 phand={}
 hancur=1 --hand cursor pos

 add_to_hand(phand,cards[1])
 add_to_hand(phand,cards[1])
 add_to_hand(phand,cards[1])
 add_to_hand(phand,cards[2])
 add_to_hand(phand,cards[3])
 phand[hancur].sel=true
 
 
 --sprstr=copyspr()
end

function _update60()
 if btnp(‚¨ÖÔ∏è) then
  sel_hand("‚¨ÖÔ∏è")
 elseif btnp(‚û°Ô∏è) then
  sel_hand("‚û°Ô∏è")
 end
 
 if btnp(üÖæÔ∏è) then
  play_card()
 end
end

function _draw()
 cls(1)
 
 render_ene()
 
 render_hand() 
 
 --printh(sprstr,'@clip')
 
end


function getspr(sprdata)
 for j=1,16 do
  for i=1,16 do
   sset(16+i-1,j-1,sprdata[i+(j-1)*16])
  end
 end
end


function copyspr()
 local newspr=""
 
 for j=0,15 do
  for i=48,63 do
   local pxclr=tostr(num2hex(sget(i,j)))
   newspr=newspr..pxclr
   sset(i+16,j,sget(i,j))
  end
 end
 
 return newspr
end


function add_to_hand(hand,card)
 local newcard={name=card[1],cost=card[2],pwr=card[3],tou=card[4],fx=card[5],gfx=card[6],sel=false}
 add(hand,newcard)
 return hand
end

function sel_hand(dir)
 if #phand > 0 then
  if dir == "‚¨ÖÔ∏è" then
   if hancur > 1 then
    phand[hancur].sel=false
    hancur-=1
    phand[hancur].sel=true
   end
  elseif dir == "‚û°Ô∏è" then
   if hancur < #phand then
    phand[hancur].sel=false
    hancur+=1
    phand[hancur].sel=true
   end
  end
 end
end

function play_card()
 --temporarily just erases the
 --card
 
 --if there're cards in hand
 if #phand>0 then
  --if enough energy
  if phand[hancur].cost<=ene then
		 --subtract energy
		 ene-=phand[hancur].cost
		 
		 --remove card from hand
		 deli(phand,hancur)
		 if hancur>#phand then
		  hancur-=1
		 end
		 if #phand>0 then
		  phand[hancur].sel=true
		 end
		end
	end
	
end
-->8
--render


function render_hand()
 local len=#phand
 if len > 0 then
  for k,v in pairs(phand) do
   render_card(64-(cw/2*len)+(cw*(k-1)+k),98,v)
  end
 end
end


function render_card(x,y,c)
 --args
 --x: int (x position)
 --y: int (y position)
 --c: table (card table)

 local cpx=x --card pos x
 local cpy=y --card pos y
 local z=16  --zoom
 
 --if selected
 if c.sel then
  --draw highlight
  rect(cpx-1,cpy-1,cpx+cw,cpy+ch,8)
  
  --draw tooltip
  --tOOltIplEFTbORDER/rIGHTbORDER
  local cnl=#c.name --cardnamelength
  local tltplb=cpx+(cw/2)-(cnl/2*4)-2
  local tltprb=cpx+(cw/2)+(cnl/2*4)
  if tltplb<0 then
   tltplb+=abs(tltplb)
   tltprb+=abs(tltplb)
  elseif tltprb>127 then
   tltplb-=tltprb-127
   tltprb-=tltprb-127
  end
  rectfill(tltplb ,cpy-9,tltprb ,cpy-2,0)
  print(c.name,tltplb+2,cpy-8,7)
 
 end
 --black border
 rectfill(cpx,cpy,cpx+cw-1,cpy+ch-1,0)
 --card frame
 rectfill(cpx+1,cpy+1,cpx+1+cw-3,cpy+1+ch-3,9)
 --textbox
 rectfill(cpx+2,cpy+19,cpx+2+cw-5,cpy+19+6,10)
 --illustr.
 getspr(c.gfx)
 sspr(16,0,16,16,cpx+2,cpy+2,z,z)
 
 --cost
 circfill(cpx+20,cpy,3,5)
 circfill(cpx+19,cpy,3,6)
 print(c.cost,cpx+20-2,cpy-2,0)
 
 --pwr/tou
 print(c.pwr.."/"..c.tou,cpx+5,cpy+20,0)
end


function render_ene()
 circfill(8,10,6,5)
 circfill(7,10,6,6)
 print("\^w\^t"..ene,5,5,0)
end
-->8
--card list
cards={
 {"sIMPLE sLIME",1,1,1,"","0000000777000000000000007000070000000000000077700700000700000700777000077000000007000070070000000000770000770000000700000000700000700000000007000070700000700700070070000070007007007000007000700070000000000700000700000000700000007777777700000000000000000000"},
 {"cOYOTE",2,2,1,"","7777777000000000777000000000000077070070000770007000707700707000700000707700700070000070000070000000770700707000000070000000700000070000000077000007000000700700000707070707700000070707070000000070007007000000070700000700000070707077007000000707777077770000"},
 {"cARD mONSTER",4,3,3,"","0000000000000000000000000000000000000000000000000007000000007000000770000007700000077700007770000000000000000000000000000000000000000000000000000007000000007000000770707007700000007777777700000070077777700000070700777700007070070000000007070707000000007077"},
 {"bLIND sPELL",1,0,0,"blind:1","0000000000000000000000000000000000000000000000000007000000007000000770000007700000077700007770000000000000000000000000000000000000000000000000000007000000007000000770707007700000007777777700000070077777700000070700777700007070070000000007070707000000007077"},
}
-->8
--support functions

function rspr(s,x,y,a,w,h)
 --by gabe_8_bit
 sw=(w or 1)*8
 sh=(h or 1)*8
 sx=(s%8)*8
 sy=flr(s/8)*8
 x0=flr(0.5*sw)
 y0=flr(0.5*sh)
 a=a/360
 sa=sin(a)
 ca=cos(a)
 for ix=sw*-1,sw+4 do
  for iy=sh*-1,sh+4 do
   dx=ix-x0
   dy=iy-y0
   xx=flr(dx*ca-dy*sa+x0)
   yy=flr(dx*sa+dy*ca+y0)
   if (xx>=0 and xx<sw and yy>=0 and yy<=sh-1) then
    pset(x+ix,y+iy,sget(sx+xx,sy+yy))
   end
  end
 end
end

function num2hex(number)
--by vitoralmeidasilva
    local base = 16
    local result = {}
    local resultstr = ""

    local digits = "0123456789abcdef"
    local quotient = flr(number / base)
    local remainder = number % base

    add(result, sub(digits, remainder + 1, remainder + 1))

  while (quotient > 0) do
    local old = quotient
    quotient /= base
    quotient = flr(quotient)
    remainder = old % base

         add(result, sub(digits, remainder + 1, remainder + 1))
  end

  for i = #result, 1, -1 do
    resultstr = resultstr..result[i]
  end

  return resultstr
end
__gfx__
00000000e2eeeeeecccccccbbbccccccaaaaaaafffffffffa00000000000000a00505a507555755722ccc22cccccc28850055500555500551818181668181818
00000000272eeeeeccccccccbccccbccaaafffffffffffff00000000000000007775a5555755757522c1cccc1cc1c288555555a5500555558181866556818181
007007002772eeeeccccccccccccbbbcaafaff4ffff44fff000000000000000000577775557aaa5522c11cc1c111c88805500aaaa55000501816655556681818
0007700027772eeecbcccccbcccccbccafffaf44ff444fff0008000000008000050a555777a7a7a522c1c11cccc1888800000aaaaaa000008165555665568181
00077000277772eebbbccccbbcccccccafffff4444444fff0008800000088000005a505555aa7aa522c1cccc8cc8882200000aaaaa0000001655566555561818
0070070027722eeecbccccb3bbccccccafffff4444444fff0008880000888000050a555577a7a7a522c1c8cccc88c2220000aaaaa00000006565655558568181
00000000e2272eeeccccbbbb3bbbccccffff444044044fff0000000000000000005a5577557aaa7522c1ccc8c881c2220000aaaaa00000006556555555561616
00000000eeeeeeeecccbbbbbb33bbcccffff444444444fff0000000000000000507777555757575722c1ccc888c1c2220000aaaa000000006556585555568666
0000000000000000ccbbbbbbbbbbbbccfff44444444440ff00000000000000007777a5507557575522c1cc888881c222000aaaa0000000006556555556681656
0000000000000000cc331bbbbb1bbbccfff44444444444ff000800000000800077705a575575575022cc1c8c88c1c222000aaa00000000008656555665568161
000000000000000013331bbbbb1bbbbcfff4404044f44fff0008808080088000770505755075557522281cccc88cc2220000aaa000a000001866566555556868
000000000000000013331333331bbbbcfff4404044ffffff00008888888800007500507a5575057a222c1cc8cc88222200a00aaa0000a0008165655555566161
000000000000000011333333333bbb11ff44440444ffffff000008822880000000007775a7555570222cc1cccc88822200000aaa000000a01865565885681618
00000000000000001113333333333111f440444444ffffff0aaa00222200aaa000577750577aaa772222cc11c1c882220aa000aaaa0a00008165565885618181
0000000000000000111133333333111144044444444fffffaaaaa000000aaaaa007777007775057722222ccc1cc288820000aaaaaaaaa00a1865565555681818
00000000000000001111111111111111f4f4444f4444ffffa0a0a000000a0a0a50777705777050772222222ccc222882000aaaaaaaaaaa008165565555568181
65565565565565560000000000000040111bb1bbbb1bb111f0000000000000000000000000000000000000000000000000000000000000000000000000000000
6666664004666666000000000000044011b11bbbbbb11b11f0000000000000000000000000000000000000000000000000000000000000000000000000000000
565560400405655600000000000044001111171bb1711111f0000000000000000000000000000000000000000000000000000000000000000000000000000000
6666404004046666000000000000400011bb1bbbbbb11111f0000000000000000000000000000000000000000000000000000000000000000000000000000000
655640400404556500000000000440001bbb11b33b111111f0000000000000000000000000000000000000000000000000000000000000000000000000000000
666440400404466600000000022240001b7b1b3333b11111f0000000000000000000000000000000000000000000000000000000000000000000000000000000
56540440044045550000000028882000b77bb3b33b3b1111f0000000000000000000000000000000000000000000000000000000000000000000000000000000
56440440044044550000000028882000b7111333333bb111f0000000000000000000000000000000000000000000000000000000000000000000000000000000
66440440044044660000000442220000b71113333331b111f0000000000000000000000000000000000000000000000000000000000000000000000000000000
55445440044544560000044444000000b71111333311bb11f0000000000000000000000000000000000000000000000000000000000000000000000000000000
55454540045454560004444400000000b713111bb1117bb1f0000000000000000000000000000000000000000000000000000000000000000000000000000000
64454540045454460044444400000000b733313333177bbbf0000000000000000000000000000000000000000000000000000000000000000000000000000000
54455540045554450044444000000000b73133bbbb77bbb1f0000000000000000000000000000000000000000000000000000000000000000000000000000000
544044400444044500444400000000001b711333777bbb3100000000000000000000000000000000000000000000000000000000000000000000000000000000
544044400444044504444400000000003b7177777bbbb13300000000000000000000000000000000000000000000000000000000000000000000000000000000
6440444004440446444440000000000031b11bbbbbb1111300000000000000000000000000000000000000000000000000000000000000000000000000000000
